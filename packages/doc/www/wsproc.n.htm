<!-- Creator     : groff version 1.18.1 -->
<!-- CreationDate: Mon Jun 18 15:14:07 2007 -->
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta name="Content-Style" content="text/css">
<title>&lt;ws&gt;proc</title>
</head>
<body>

<h1 align=center>&lt;ws&gt;proc</h1>
<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#SYNTAX">SYNTAX</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#EXAMPLES">EXAMPLES</a><br>
<a href="#KEYWORDS">KEYWORDS</a><br>

<hr>
<pre>______________________________________________________________________________
</pre>
<a name="NAME"></a>
<h2>NAME</h2>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>wsproc</p>
</td>
</table>
<a name="SYNOPSIS"></a>
<h2>SYNOPSIS</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>TWiST is a front-end toolkit for rapidly deploy Tcl
procedures as a web service. The simplified API of TWiST
consists of only three procedures:
<b>&lt;ws&gt;namespace</b>, <b>&lt;ws&gt;proc</b> and
<b>&lt;ws&gt;return</b>. The names reflect the underlying
Tcl commands.</p>
<!-- INDENTATION -->
<p><b>&lt;ws&gt;proc</b> defines the interface between a Tcl
proc and a web service operation.</p>
</td>
</table>
<a name="SYNTAX"></a>
<h2>SYNTAX</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>&lt;ws&gt;proc</b> <i>fullyQualifiedProcName args
body</i></p>
<!-- INDENTATION -->
<p><b>&lt;ws&gt;proc</b> <i>fullyQualifiedProcName
typedArgsList body</i> ?returns? ?typedReturnList?</p>
<!-- INDENTATION -->
<pre>_________________________________________________________________
</pre>
</td>
</table>
<a name="DESCRIPTION"></a>
<h2>DESCRIPTION</h2>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>The TWiST API enables rapid deployment of Tcl procedures
as a web service. Currently TWiST runs as an AOLserver
module and uses AOLserver as the HTTP server for request and
response. TWiST is non-invasive: the API is used in a Tcl
script in the pageroot of the AOLserver. The location of the
Tcl script file becomes the address of the web service. In
addition, the developer does not have to modify any existing
code. The TWiST API is best considered as a configuration of
an interface. This allows the interface and the internal API
to vary independently and maintains separation between code
and configuration.</p>
<!-- INDENTATION -->
<p>Once a web service is defined in a Tcl page via the TWiST
API, visiting the page with a web browser will return a list
of operations available, links to more information for each
operation, and a link to the Web Service Description (WSDL)
of the web service. The operation links can be followed to
display an example SOAP Request to invoke the operation.
This link also provides a form which can be used to submit
parameter values, invoke the service and display the actual
SOAP Request and SOAP Response.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>&lt;ws&gt;proc</b> <i>fullyQualifiedProcName args
body</i></p></td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>This form of <b>&lt;ws&gt;proc</b> applies all defaults
assumed by TWiST.</p>
<!-- INDENTATION -->
<p>Example procedure and default behavior:</p></td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<pre>&lt;ws&gt;proc ::MyWebService::AddNumbers { a b } {

   return [expr $a + $b]
}

</pre>
</td>
</table>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The above call would create an operation named
AddNumbersOperation with and input message named
AddNumbersRequest and output message named
AddNumbersResponse. The AddNumbersRequest message would have
an XML Schema type named tns:AddNumbersRequest, where tns is
the XML Namespace prefix which corresponds to the default
XML Namespace &rsquo;urn:tcl:MyWebService&rsquo;. The
parameters <b>a</b> and <b>b</b> will default to the XML
Schema type xsd:string, as will the return type. Since there
is no specified structure to the AddNumbersResponse type,
the default is an element of name ResultString with type
xsd:string.</p></td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>&lt;ws&gt;proc</b> <i>fullyQualifiedProcName
typedArgsList body returns typedReturnList</i></p></td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>This form of <b>&lt;ws&gt;proc</b> applies specified
types and names to the message and operation format.
Revising the example above, gives a more useful definition
and allows TWiST to apply meaningful validation of the input
message prior to invocation:</p></td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<pre>&lt;ws&gt;proc ::MyWebService::AddNumbers { a:integer b:integer } {

   return [expr $a + $b]

} returns { Sum:integer }

</pre>
</td>
</table>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>Before invocation of the AddNumbersOperation, the input
message AddNumbersRequest will be validated. In order to
pass validation, it must contain both sub-elements <b>a</b>
and <b>b</b>, and the contents of these elements must be of
type xsd:integer. If the input message doesn&rsquo;t
validate, a SOAP fault is returned identifying the fault.
The output message is not validated, but this can be
performed by the client since the type is available via the
WSDL type definition.</p></td>
</table>
<a name="EXAMPLES"></a>
<h2>EXAMPLES</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>AddNumbers Example:</p></td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<pre>&lt;ws&gt;namespace init ::MyWebService

&lt;ws&gt;proc ::MyWebService::AddNumbers { a:integer b:integer } {

   return [expr $a + $b]

} returns { Sum:integer }

&lt;ws&gt;namespace finalize ::MyWebService

&lt;ws&gt;namespace freeze ::MyWebService

&lt;ws&gt;return ::MyWebService

</pre>
</td>
</table>
<a name="KEYWORDS"></a>
<h2>KEYWORDS</h2>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>tclNamespace</p>
</td>
</table>
<hr>
</body>
</html>
