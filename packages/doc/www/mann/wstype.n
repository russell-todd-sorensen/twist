'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2006/06/26 00:29:11 jgdavidson Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..

.TH <ws>type n 0.9 TWiST "TWiST: Tcl Web Services Toolkit"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
wstype \- commands
.SH SYNOPSIS
TWiST is a front-end toolkit for rapidly deploy Tcl procedures as a web service. The simplified API of TWiST consists of only three operational procedures: \fB<ws>namespace\fR, \fB<ws>proc\fR and \fB<ws>return\fR. The names reflect the underlying Tcl commands. Type definition procedures include \fB<ws>type\fR and \fB<ws>element\fR.

\fB<ws>type\fR commands allow derivation of simpleTypes from the built in XML-Schema types. The \fBtypeName\fR parameter is a combination of the type namespace prefix and the type name, for instance stock::Symbol or stock:Symbol (the number of colons does not affect the result). The subcommand can be abbreviated, with optional characters shown in square brackets, as in enum[eration].
.SH SYNTAX
.PP
\fB<ws>type exists \fItypeName \fR
.PP
\fB<ws>type sim[ple] \fItypeName \fR ?base?
.PP
\fB<ws>type enum[eration] \fItypeName enumList ?base?\fR
.PP
\fB<ws>type pat[tern] \fItypeName pattern ?base? \fR
.PP
\fB<ws>type decimalRest[riction] \fItypeName restrictionList ?base? \fR
.PP
\fB<ws>type q[uery] \fItypeName \fR
.PP
\fB<ws>type valid[ate] \fItypeName  value\fR
.BE
.SH DESCRIPTION
.PP
TWiST provides several APIs for defining types. All types are based upon built in types as described in XML-Schema Standards. The broad categories are simpleTypes such as integer, float, string, byte, etc. and complexTypes which are array and list type structures which are built up from simpleTypes. 

SimpleTypes are defined and derived via the <ws>type API. The derivations are called restrictions. There are only a few methods of restriction available: renaming, enumeration and a regular expression or pattern. The current version of TWiST does not support uniuon types or list types. 
.PP
.TP
\fB<ws>type exists\fR
.RS
If the type is already defined, returns 1, else returns 0.
.RE
.PP
\fB<ws>type sim[ple]\fR
.RS
Creates a new type with the new typeName, which is validated via the base type code. The effect is to provide an additional name for the simple type, or to import the type into the current namespace.
.RE
.PP
\fB<ws>type enum[eration]\fR
.RS
Creates a type which is restricted to be one of the enumerated values, each of which must be of the underlying base type.
.RE
.PP
\fB<ws>type pat[tern]\fR
.RS
Creates a type with a valuespace defined by a regular expression or pattern. The values must also be a valid in the base type valuespace. 
.RE
.PP
\fB<ws>type decimalRest[riction]\fR
.RS
Creates a derived decimal type (a number) using a number of facets:
  The following facets are specified as a name-value list: {totalDigits 5 fractionDigits 2}
  \fBminInclusive\fR -- a decimal number defining the low end of the restricted range of values. minInclusive is included in the range.
  \fBminExclusive\fR -- a decimal number defining the low end of the restricted range of values. minExclusive is excluded from the range.
  \fBmaxExclusive\fR -- a decimal number defining the high end of the restricted range of values. maxExclusive is excluded from the range.
  \fBmaxInclusive\fR -- a decimal number defining the high end of the restricted range of values. maxExclusive is included in the range.
  \fBtotalDigits\fR  -- an integer limiting the total number of significant digits. Leading and trailing zeros are not included in the count.
  \fBfractionDigits\fR -- an integer limiting the total number of digits to the right of the decimal point. Trailing zeros are not included in the count.
  
At most only one of the min and one of the max facets can be included in the list. MinInclusive must be less than maxExclusive, and fractionDigits must be less than totalDigits. totalDigits and fractionDigits do not limit the lexical representation, which could have more or less digits than the canonical form. The canonical form disallows an optional leading positive sign (+), and must have at least one digit before and after the required decimal point, unless the restriction includes zero fractionDigits.

The default base type is xsd::decimal. If a range of integers is required, the base type should be xsd::integer. Any other numeric type can be used as a base as long as the new range is a subset of the base type, otherwise only the the base type will trim the range of the derived type, with potentially unexpected results. 
.RE
.PP
\fB<ws>type q[uery]\fR
.RS
Returns a name value list of information about an existing type, or the empty string if the type doesn't exist. 
.RE
.PP
\fB<ws>type valid[ate]\fR
.RS
Checks if supplied value is a valid member of the type. (unimplimented)
.RE
.SH NOTES
Type Definition and Use Example
.CS

<ws>namespace schema "urn:com:example:stock"

<ws>type simple stock::verbose xsd::boolean

<ws>type simple stock::quote xsd::float

<ws>type enum stock::symbol {MSFT WMT XOM GM F GE}

<ws>type enum stock::trend {-1 0 1} xsd::integer

<ws>type pattern stock::Code {[0-9]{4}} xsd::integer

<ws>element sequence stock::StockResponse {  
    {Symbol:stock::symbol}
    {Quote:stock::quote}
    {DateOfChange:stock::dateOfChange {minOccurs 0}}
    {Name:stock::name                 {minOccurs 0 nillable no}}
    {Trend:stock::trend               {minOccurs 0}}
    {DailyMove:stock::dailyMove       {minOccurs 0}}
    {LastMove:stock::lastMove         {minOccurs 0}}
}

<ws>element sequence stock::StockRequest {
    {Symbol:stock::symbol}
    {Verbose:stock::verbose {minOccurs 0 default "1"}}
}

<ws>element sequence stock::StocksRequest {
    {StockRequest:elements::stock::StockRequest {maxOccurs 4}}
}


.CE
.PP
.SH KEYWORDS
typeName
